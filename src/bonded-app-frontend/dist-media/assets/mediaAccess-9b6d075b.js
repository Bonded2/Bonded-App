var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});const _MediaAccessService=class _MediaAccessService{constructor(){this.supportedImageTypes=["image/jpeg","image/jpg","image/png","image/webp","image/heic"],this.supportedVideoTypes=["video/mp4","video/mov","video/avi","video/webm"],this.fileCache=new Map,this.permissionsGranted=!1}isFileSystemAccessSupported(){return"showOpenFilePicker"in window}async checkGalleryAccess(){try{return this.isFileSystemAccessSupported()?{supported:!0,method:"file_system_access"}:{supported:!0,method:"file_input"}}catch(error){return{supported:!1,error:error.message}}}async requestGalleryPermission(){try{return this.isFileSystemAccessSupported()?(this.permissionsGranted=!0,{granted:!0,method:"file_system_access"}):(this.permissionsGranted=!0,{granted:!0,method:"file_input"})}catch(error){return{granted:!1,error:error.message}}}async getGalleryFilesViaFSA(options={}){try{const pickerOptions={types:[{description:"Images and Videos",accept:{"image/*":[".png",".jpg",".jpeg",".webp",".heic"],"video/*":[".mp4",".mov",".avi",".webm"]}}],multiple:!0,...options},fileHandles=await window.showOpenFilePicker(pickerOptions),files=[];for(const fileHandle of fileHandles)try{const file=await fileHandle.getFile(),fileWithMetadata={file,name:file.name,size:file.size,type:file.type,lastModified:file.lastModified,lastModifiedDate:new Date(file.lastModified),webkitRelativePath:"",handle:fileHandle,source:"file_system_access"};files.push(fileWithMetadata)}catch{continue}return files}catch(error){throw error.name==="AbortError"?new Error("User cancelled file selection"):new Error(`Failed to access files: ${error.message}`)}}async getGalleryFilesViaInput(options={}){return new Promise((resolve,reject)=>{const input=document.createElement("input");input.type="file",input.multiple=!0,input.accept="image/*,video/*",input.onchange=event=>{try{const files=Array.from(event.target.files).map(file=>({file,name:file.name,size:file.size,type:file.type,lastModified:file.lastModified,lastModifiedDate:new Date(file.lastModified),webkitRelativePath:file.webkitRelativePath||"",source:"file_input"}));resolve(files)}catch(error){reject(new Error(`Failed to process selected files: ${error.message}`))}},input.oncancel=()=>{reject(new Error("User cancelled file selection"))},input.click()})}async getRecentGalleryFiles(options={}){const defaultOptions={maxFiles:50,maxAge:2592e6,types:["image","video"],...options};try{let files;this.isFileSystemAccessSupported()?files=await this.getGalleryFilesViaFSA(defaultOptions):files=await this.getGalleryFilesViaInput(defaultOptions);const now=Date.now();return files.filter(fileData=>{const{file}=fileData,isImage=this.supportedImageTypes.includes(file.type),isVideo=this.supportedVideoTypes.includes(file.type);return!(defaultOptions.types.includes("image")&&!isImage&&defaultOptions.types.includes("video")&&!isVideo||defaultOptions.types.includes("image")&&!defaultOptions.types.includes("video")&&!isImage||defaultOptions.types.includes("video")&&!defaultOptions.types.includes("image")&&!isVideo||now-file.lastModified>defaultOptions.maxAge)}).sort((a,b)=>b.file.lastModified-a.file.lastModified).slice(0,defaultOptions.maxFiles)}catch(error){throw new Error(`Failed to get gallery files: ${error.message}`)}}async extractImageMetadata(file){return new Promise(resolve=>{try{const img=new Image;img.onload=()=>{const metadata={width:img.naturalWidth,height:img.naturalHeight,aspectRatio:img.naturalWidth/img.naturalHeight,format:file.type,size:file.size,lastModified:file.lastModified,hasLocation:!1,orientation:1};resolve(metadata)},img.onerror=()=>{resolve({width:0,height:0,aspectRatio:0,format:file.type,size:file.size,lastModified:file.lastModified,hasLocation:!1,orientation:1,error:"Could not load image"})},img.src=URL.createObjectURL(file)}catch(error){resolve({width:0,height:0,aspectRatio:0,format:file.type,size:file.size,lastModified:file.lastModified,hasLocation:!1,orientation:1,error:error.message})}})}async createThumbnail(file,maxSize=200){return new Promise((resolve,reject)=>{try{const img=new Image;img.onload=()=>{const canvas=document.createElement("canvas"),ctx=canvas.getContext("2d");let{width,height}=img;width>height?width>maxSize&&(height=height*maxSize/width,width=maxSize):height>maxSize&&(width=width*maxSize/height,height=maxSize),canvas.width=width,canvas.height=height,ctx.drawImage(img,0,0,width,height),canvas.toBlob(blob=>{resolve(blob)},"image/jpeg",.8)},img.onerror=()=>{reject(new Error("Failed to create thumbnail"))},img.src=URL.createObjectURL(file)}catch(error){reject(error)}})}async fileToDataURL(file){return new Promise((resolve,reject)=>{const reader=new FileReader;reader.onload=event=>{resolve(event.target.result)},reader.onerror=()=>{reject(new Error("Failed to read file"))},reader.readAsDataURL(file)})}async fileToArrayBuffer(file){return new Promise((resolve,reject)=>{const reader=new FileReader;reader.onload=event=>{resolve(event.target.result)},reader.onerror=()=>{reject(new Error("Failed to read file"))},reader.readAsArrayBuffer(file)})}async getFileInfo(fileData){try{const{file}=fileData,isImage=this.supportedImageTypes.includes(file.type);let metadata={name:file.name,size:file.size,type:file.type,lastModified:file.lastModified,source:fileData.source},thumbnail=null;if(isImage){const imageMetadata=await this.extractImageMetadata(file);metadata={...metadata,...imageMetadata};try{thumbnail=await this.createThumbnail(file)}catch{}}return{...fileData,metadata,thumbnail,dataURL:null}}catch(error){return{...fileData,metadata:{name:fileData.file.name,size:fileData.file.size,type:fileData.file.type,lastModified:fileData.file.lastModified,source:fileData.source,error:error.message},thumbnail:null,dataURL:null}}}hasGalleryPermission(){return this.permissionsGranted}clearCache(){this.fileCache.clear()}};__name(_MediaAccessService,"MediaAccessService");let MediaAccessService=_MediaAccessService;const mediaAccessService=new MediaAccessService;export{mediaAccessService as m};
