var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{_ as __vitePreload}from"./icp-sdk-b71c0736.js";import{a as aiEvidenceFilter$1}from"./evidenceFilter-6e1ec898.js";import{encryptionService}from"./encryption-3413e488.js";import{EncryptionService}from"./encryption-3413e488.js";import{c as canisterIntegration}from"./canisterIntegration-a5c53e9e.js";import{m as mediaAccessService}from"./mediaAccess-9b6d075b.js";import{o as openDB}from"./vendor-e6e658b6.js";import{timelineService}from"./timelineService-a34b98cd.js";import{TimelineService}from"./timelineService-a34b98cd.js";import{icpCanisterService}from"./icpCanisterService-30902200.js";import"./textClassification-848edeeb.js";import"./index-ed0f0e28.js";import"./icpNetworkHelper-2c245b46.js";import"./emailService-11bba984.js";let jsPDF,JSZip;const JSPDF_ESM_URLS=["https://cdn.jsdelivr.net/npm/jspdf@3.0.1/+esm","https://cdn.skypack.dev/jspdf@3.0.1","https://unpkg.com/jspdf@3.0.1/dist/jspdf.es.min.js"],JSZIP_ESM_URLS=["https://cdn.jsdelivr.net/npm/jszip@3.10.1/+esm","https://cdn.skypack.dev/jszip@3.10.1","https://unpkg.com/jszip@3.10.1/dist/jszip.min.js"],_EvidenceProcessor=class _EvidenceProcessor{constructor(){this.db=null,this.isProcessing=!1,this.lastProcessTime=null,this.settings={uploadSchedule:"daily",uploadTime:"00:00",maxPhotosPerDay:1,maxMessagesPerDay:10,enableAutoUpload:!0,requireBothPartners:!1},this.statistics={totalUploads:0,successfulUploads:0,failedUploads:0,lastUploadTime:null,totalPhotosProcessed:0,totalMessagesProcessed:0},this.isProduction=typeof window<"u"&&(window.location.hostname.includes("icp0.io")||window.location.hostname.includes("ic0.app")),this.loadedLibraries=new Set,this.initDB()}async initDB(){try{this.db=await openDB("BondedEvidenceProcessorDB",1,{upgrade(db){if(!db.objectStoreNames.contains("evidenceQueue")){const store=db.createObjectStore("evidenceQueue",{autoIncrement:!0});store.createIndex("timestamp","timestamp"),store.createIndex("status","status"),store.createIndex("date","date")}if(!db.objectStoreNames.contains("uploadHistory")){const store=db.createObjectStore("uploadHistory",{autoIncrement:!0});store.createIndex("timestamp","timestamp"),store.createIndex("success","success")}db.objectStoreNames.contains("processingLogs")||db.createObjectStore("processingLogs",{autoIncrement:!0}).createIndex("timestamp","timestamp"),db.objectStoreNames.contains("settings")||db.createObjectStore("settings")}}),await this.loadSettings()}catch{}}async processDailyEvidence(targetDate=new Date){if(this.isProcessing)throw new Error("Evidence processing already in progress");this.isProcessing=!0;const processingId=Date.now();try{const result={processingId,targetDate,timestamp:Date.now(),success:!1,evidence:{photo:null,messages:[],metadata:{}},filtering:{photoResult:null,messagesResult:null},upload:{success:!1,packageId:null,error:null},errors:[]};await this.logProcessingStep(processingId,"collection_start",{targetDate});const collectedEvidence=await this.collectEvidenceForDate(targetDate);if(result.evidence=collectedEvidence,!collectedEvidence.photo&&collectedEvidence.messages.length===0)return result.errors.push("No evidence found for target date"),await this.logProcessingStep(processingId,"no_evidence",{targetDate}),result;await this.logProcessingStep(processingId,"filtering_start");const filteringResult=await this.filterEvidence(collectedEvidence);if(result.filtering=filteringResult,!filteringResult.approved)return result.errors.push(`Evidence failed AI filtering: ${filteringResult.reasoning}`),aiEvidenceFilter$1.getSettings().allowManualOverride&&(await this.queueForManualReview(collectedEvidence,filteringResult,targetDate),result.manualReviewQueued=!0),await this.logProcessingStep(processingId,"filtering_failed",filteringResult),result;await this.logProcessingStep(processingId,"packaging_start");const packagedEvidence=await this.packageEvidence(collectedEvidence,targetDate);await this.logProcessingStep(processingId,"upload_start");const uploadResult=await this.uploadEvidence(packagedEvidence);return result.upload=uploadResult,uploadResult.success?(result.success=!0,this.statistics.successfulUploads++,this.statistics.lastUploadTime=Date.now(),await this.logProcessingStep(processingId,"upload_success",{packageId:uploadResult.packageId})):(result.errors.push(`Upload failed: ${uploadResult.error}`),this.statistics.failedUploads++,await this.queueForRetry(packagedEvidence,targetDate),await this.logProcessingStep(processingId,"upload_failed",uploadResult)),this.statistics.totalUploads++,collectedEvidence.photo&&this.statistics.totalPhotosProcessed++,collectedEvidence.messages.length>0&&(this.statistics.totalMessagesProcessed+=collectedEvidence.messages.length),await this.saveStatistics(),this.lastProcessTime=Date.now(),result}catch(error){throw await this.logProcessingStep(processingId,"processing_error",{error:error.message,stack:error.stack}),error}finally{this.isProcessing=!1}}async collectEvidenceForDate(targetDate){const evidence={photo:null,messages:[],metadata:{targetDate:targetDate.toISOString(),collectionTime:Date.now()}};try{const photo=await this.collectPhotoForDate(targetDate);photo&&(evidence.photo=photo.file,evidence.metadata.photoMetadata={originalDate:photo.metadata.dateTaken,location:photo.metadata.location,source:photo.metadata.source,filename:photo.file.name,size:photo.file.size});const messages=await this.collectMessagesForDate(targetDate);messages.length>0&&(evidence.messages=messages.slice(0,this.settings.maxMessagesPerDay),evidence.metadata.messagesMetadata={totalFound:messages.length,selected:evidence.messages.length,source:"telegram",dateRange:{start:targetDate.toISOString().split("T")[0],end:targetDate.toISOString().split("T")[0]}})}catch(error){evidence.metadata.collectionError=error.message}return evidence}async collectPhotoForDate(targetDate){try{const photos=await mediaAccessService.scanPhotosForDate(targetDate);if(photos.length===0)return null;const selectedPhoto=photos[0];return{file:selectedPhoto.file,metadata:{...selectedPhoto.metadata,selected:!0,selectionReason:"first_available"}}}catch{return null}}async collectMessagesForDate(targetDate){try{const messages=await mediaAccessService.fetchTelegramMessages(targetDate);return messages.length===0?[]:messages.slice(0,this.settings.maxMessagesPerDay).map(message=>({...message,processed:!0,processingTime:Date.now()}))}catch{return[]}}async filterEvidence(evidence){try{return await aiEvidenceFilter$1.filterEvidencePackage({photo:evidence.photo,messages:evidence.messages,photoMetadata:evidence.metadata.photoMetadata,messagesMetadata:evidence.metadata.messagesMetadata})}catch(error){return{approved:!1,reasoning:`Filtering error: ${error.message}`,error:!0}}}async packageEvidence(evidence,targetDate){try{return{version:"1.0",type:"daily_evidence",targetDate:targetDate.toISOString(),packageTime:Date.now(),photo:evidence.photo,messages:evidence.messages,metadata:{...evidence.metadata,packageId:this.generatePackageId(targetDate),deviceInfo:{userAgent:navigator.userAgent,timestamp:Date.now()}}}}catch(error){throw error}}async uploadEvidence(packagedEvidence){try{const uploadResult={success:!1,packageId:packagedEvidence.metadata.packageId,error:null,timestamp:Date.now()},encryptedPackage=await encryptionService.encryptEvidencePackage(packagedEvidence,null),relationshipId="mock-relationship-id",canisterResult=await canisterIntegration.uploadEvidence(relationshipId,encryptedPackage.ciphertext,{packageId:packagedEvidence.metadata.packageId,originalDate:packagedEvidence.targetDate,hasPhoto:!!packagedEvidence.photo,messageCount:packagedEvidence.messages.length,uploader:"user",encrypted:!0,hash:encryptedPackage.hash});return canisterResult.success?(uploadResult.success=!0,uploadResult.evidenceId=canisterResult.evidenceId,uploadResult.canisterId="evidence-canister"):uploadResult.error="Canister upload failed",uploadResult}catch(error){return{success:!1,packageId:packagedEvidence.metadata.packageId,error:error.message,timestamp:Date.now()}}}async queueForManualReview(evidence,filteringResult,targetDate){try{if(!this.db)return;await this.db.add("evidenceQueue",{type:"manual_review",status:"pending_review",targetDate:targetDate.toISOString(),evidence,filteringResult,timestamp:Date.now()})}catch{}}async queueForRetry(packagedEvidence,targetDate){try{if(!this.db)return;await this.db.add("evidenceQueue",{type:"upload_retry",status:"pending_upload",targetDate:targetDate.toISOString(),packagedEvidence,retryCount:0,maxRetries:3,timestamp:Date.now()})}catch{}}generatePackageId(targetDate){const dateStr=targetDate.toISOString().split("T")[0],timestamp=Date.now(),random=Math.random().toString(36).substr(2,9);return`evidence-${dateStr}-${timestamp}-${random}`}async logProcessingStep(processingId,step,details={}){try{if(!this.db)return;await this.db.add("processingLogs",{processingId,step,details,timestamp:Date.now()})}catch{}}isDailyProcessingDue(){if(!this.settings.enableAutoUpload)return!1;const now=new Date,[hours,minutes]=this.settings.uploadTime.split(":").map(Number),scheduledTime=new Date(now);if(scheduledTime.setHours(hours,minutes,0,0),now>=scheduledTime){const lastProcessDate=this.lastProcessTime?new Date(this.lastProcessTime):null,today=new Date(now.getFullYear(),now.getMonth(),now.getDate());return!(lastProcessDate&&lastProcessDate>=today)}return!1}getStatistics(){return{...this.statistics}}async updateSettings(newSettings){this.settings={...this.settings,...newSettings},await this.saveSettings()}async saveSettings(){if(this.db)try{await this.db.put("settings",this.settings,"current")}catch{}}async loadSettings(){if(this.db)try{const saved=await this.db.get("settings","current");saved&&(this.settings={...this.settings,...saved})}catch{}}async saveStatistics(){if(this.db)try{await this.db.put("settings",this.statistics,"statistics")}catch{}}async cleanup(){try{this.db&&(this.db.close(),this.db=null)}catch{}}async loadJsPDF(){if(jsPDF)return jsPDF;try{if(this.isProduction)for(const url of JSPDF_ESM_URLS)try{const module=await __vitePreload(()=>import(url),[]);jsPDF=module.default||module.jsPDF||module;break}catch(urlError){if(console.warn(`❌ Failed to load jsPDF from ${url}:`,urlError.message),url===JSPDF_ESM_URLS[JSPDF_ESM_URLS.length-1])throw urlError}else{const module=await __vitePreload(()=>import("./vendor-e6e658b6.js").then(n=>n.t),["assets/vendor-e6e658b6.js","assets/icp-sdk-b71c0736.js"]);jsPDF=module.default||module.jsPDF}}catch(error){console.warn("⚠️ Failed to load jsPDF:",error.message),jsPDF=null}return jsPDF}async loadJSZip(){if(JSZip)return JSZip;try{if(this.isProduction)for(const url of JSZIP_ESM_URLS)try{const module=await __vitePreload(()=>import(url),[]);JSZip=module.default||module.JSZip||module;break}catch(urlError){if(console.warn(`❌ Failed to load JSZip from ${url}:`,urlError.message),url===JSZIP_ESM_URLS[JSZIP_ESM_URLS.length-1])throw urlError}else{const module=await __vitePreload(()=>import("./vendor-e6e658b6.js").then(n=>n.j),["assets/vendor-e6e658b6.js","assets/icp-sdk-b71c0736.js"]);JSZip=module.default||module}}catch(error){console.warn("⚠️ Failed to load JSZip:",error.message),JSZip=null}return JSZip}async generateEvidencePDF(evidenceItems,options={}){try{const jsPDFLib=await this.loadJsPDF();if(!jsPDFLib)throw new Error("jsPDF library not available");const pdf=new jsPDFLib({orientation:"portrait",unit:"mm",format:"a4",compress:!0});pdf.setFontSize(20),pdf.text("Relationship Evidence Package",20,30),pdf.setFontSize(12),pdf.text(`Generated: ${new Date().toLocaleDateString()}`,20,45),pdf.text(`Total Items: ${evidenceItems.length}`,20,55);let pageCount=1;for(let i=0;i<evidenceItems.length;i++){const item=evidenceItems[i];if((i>0||pageCount>1)&&(pdf.addPage(),pageCount++),pdf.setFontSize(14),pdf.text(`Evidence Item ${i+1}`,20,30),pdf.setFontSize(10),pdf.text(`Date: ${item.date||"Unknown"}`,20,40),pdf.text(`Type: ${item.type||"Unknown"}`,20,45),item.image)try{pdf.addImage(item.image,"JPEG",20,55,170,120)}catch(imageError){console.warn("Failed to add image to PDF:",imageError),pdf.text("Image could not be embedded",20,60)}if(item.text){const startY=item.image?180:55,splitText=pdf.splitTextToSize(item.text,170);pdf.text(splitText,20,startY)}}const pdfBlob=pdf.output("blob"),source=this.isProduction?"ESM CDN":"Bundled";return{blob:pdfBlob,filename:`bonded-evidence-${Date.now()}.pdf`,size:pdfBlob.size}}catch(error){throw console.error("❌ PDF generation failed:",error),new Error(`PDF generation failed: ${error.message}`)}}async createEvidenceZip(evidenceItems,options={}){try{const JSZipLib=await this.loadJSZip();if(!JSZipLib)throw new Error("JSZip library not available");const zip=new JSZipLib,metadata={created:new Date().toISOString(),totalItems:evidenceItems.length,description:"Bonded relationship evidence package"};zip.file("metadata.json",JSON.stringify(metadata,null,2));for(let i=0;i<evidenceItems.length;i++){const item=evidenceItems[i],itemFolder=zip.folder(`evidence_${i+1}`);itemFolder.file("info.json",JSON.stringify({date:item.date,type:item.type,description:item.description||""},null,2)),item.image&&itemFolder.file("image.jpg",item.image,{binary:!0}),item.text&&itemFolder.file("text.txt",item.text)}const zipBlob=await zip.generateAsync({type:"blob",compression:"DEFLATE",compressionOptions:{level:6}}),source=this.isProduction?"ESM CDN":"Bundled";return{blob:zipBlob,filename:`bonded-evidence-${Date.now()}.zip`,size:zipBlob.size}}catch(error){throw console.error("❌ ZIP creation failed:",error),new Error(`ZIP creation failed: ${error.message}`)}}getStatus(){return{isProduction:this.isProduction,loadedLibraries:Array.from(this.loadedLibraries),jsPDFAvailable:!!jsPDF,JSZipAvailable:!!JSZip}}};__name(_EvidenceProcessor,"EvidenceProcessor");let EvidenceProcessor=_EvidenceProcessor;const evidenceProcessor=new EvidenceProcessor,evidenceProcessorService=evidenceProcessor,_SchedulerService=class _SchedulerService{constructor(){this.isScheduled=!1,this.scheduledTimeout=null,this.settings={uploadTime:"00:00",enabled:!0,retryInterval:30*60*1e3,maxRetries:3},this.init()}async init(){try{await this.loadSettings(),this.settings.enabled&&this.scheduleNextUpload(),await this.registerPeriodicSync()}catch{}}scheduleNextUpload(){this.scheduledTimeout&&clearTimeout(this.scheduledTimeout);const delay=this.getNextUploadTime()-Date.now();this.scheduledTimeout=setTimeout(async()=>{await this.performScheduledUpload(),this.scheduleNextUpload()},delay),this.isScheduled=!0}getNextUploadTime(){const now=new Date,[hours,minutes]=this.settings.uploadTime.split(":").map(Number),nextUpload=new Date(now);return nextUpload.setHours(hours,minutes,0,0),nextUpload<=now&&nextUpload.setDate(nextUpload.getDate()+1),nextUpload.getTime()}async performScheduledUpload(){try{const result=await timelineService.uploadPendingEntries();return result.success?(await this.showSuccessNotification(result),localStorage.setItem("bonded-last-upload",Date.now().toString())):(await this.scheduleRetry(result),await this.showErrorNotification(result)),result}catch(error){const errorResult={success:!1,error:error.message,uploaded:0,failed:0};return await this.scheduleRetry(errorResult),errorResult}}async scheduleRetry(failedResult){const retryCount=failedResult.retryCount||0;if(retryCount<this.settings.maxRetries){const retryDelay=this.settings.retryInterval*(retryCount+1);setTimeout(async()=>{try{const retryResult=await timelineService.uploadPendingEntries();retryResult.retryCount=retryCount+1,!retryResult.success&&retryResult.retryCount<this.settings.maxRetries?await this.scheduleRetry(retryResult):retryResult.success&&await this.showSuccessNotification(retryResult)}catch{}},retryDelay)}}async registerPeriodicSync(){try{if("serviceWorker"in navigator&&"periodicSync"in window.ServiceWorkerRegistration.prototype){const registration=await navigator.serviceWorker.ready;if("permissions"in navigator&&(await navigator.permissions.query({name:"periodic-background-sync"})).state!=="granted")return;await registration.periodicSync.register("daily-evidence-upload",{minInterval:24*60*60*1e3})}}catch{}}async showSuccessNotification(result){const uploadedCount=result.uploaded||0,failedCount=result.failed||0;let message="Daily upload complete! ";if(uploadedCount>0&&(message+=`${uploadedCount} evidence item${uploadedCount===1?"":"s"} uploaded to secure storage`),failedCount>0&&(message+=` (${failedCount} failed)`),uploadedCount===0&&failedCount===0&&(message+="No new evidence to upload"),"Notification"in window&&Notification.permission==="granted")try{const notification=new Notification("Bonded - Evidence Upload",{body:message,icon:"/images/icon-192x192.png",badge:"/images/icon-192x192.png",tag:"evidence-upload-success",requireInteraction:!1,silent:!1,data:{uploadedCount,failedCount,timestamp:Date.now()}});setTimeout(()=>{notification.close()},8e3),notification.onclick=()=>{window.focus(),window.location.pathname!=="/timeline"&&(window.location.href="/timeline"),notification.close()};return}catch{}this.showToastNotification(message,"success")}async showErrorNotification(result){const retryCount=result.retryCount||0,message=`Upload failed. ${retryCount<this.settings.maxRetries?"Will retry automatically.":"Please check your connection and try again later."}`;if("Notification"in window&&Notification.permission==="granted")try{const notification=new Notification("Bonded - Upload Failed",{body:message,icon:"/images/icon-192x192.png",badge:"/images/icon-192x192.png",tag:"evidence-upload-error",requireInteraction:!0,data:{error:result.error,retryCount,timestamp:Date.now()}});notification.onclick=()=>{window.focus(),window.location.pathname!=="/timeline"&&(window.location.href="/timeline"),notification.close()};return}catch{}this.showToastNotification(message,"error")}showToastNotification(message,type="info"){const toast=document.createElement("div");toast.className=`bonded-toast bonded-toast-${type}`,toast.style.cssText=`
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type==="success"?"#4ade80":type==="error"?"#ef4444":"#3b82f6"};
      color: white;
      padding: 16px 24px;
      border-radius: 8px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      z-index: 10000;
      max-width: 400px;
      font-family: system-ui, -apple-system, sans-serif;
      font-size: 14px;
      line-height: 1.4;
      animation: slideIn 0.3s ease-out;
    `;const style=document.createElement("style");style.textContent=`
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
    `,document.head.appendChild(style),toast.textContent=message,document.body.appendChild(toast),setTimeout(()=>{toast.style.animation="slideOut 0.3s ease-in",setTimeout(()=>{toast.parentNode&&toast.parentNode.removeChild(toast),style.parentNode&&style.parentNode.removeChild(style)},300)},5e3)}async updateSettings(newSettings){this.settings={...this.settings,...newSettings},await this.saveSettings(),newSettings.uploadTime&&this.settings.enabled&&this.scheduleNextUpload(),newSettings.enabled!==void 0&&(newSettings.enabled?this.scheduleNextUpload():this.stop())}stop(){this.scheduledTimeout&&(clearTimeout(this.scheduledTimeout),this.scheduledTimeout=null),this.isScheduled=!1}getSettings(){return{...this.settings}}isUploadDue(){const lastUpload=localStorage.getItem("bonded-last-upload");if(!lastUpload)return!0;const timeSinceLastUpload=Date.now()-parseInt(lastUpload),dayInMs=24*60*60*1e3;return timeSinceLastUpload>=dayInMs}async getPendingUploadCount(){try{return(await timelineService.getPendingUploads()).length}catch{return 0}}async triggerManualUpload(){try{const result=await timelineService.uploadPendingEntries();return result.success?(await this.showSuccessNotification(result),localStorage.setItem("bonded-last-upload",Date.now().toString())):await this.showErrorNotification(result),result}catch(error){const errorResult={success:!1,error:error.message,uploaded:0,failed:0};return await this.showErrorNotification(errorResult),errorResult}}async saveSettings(){try{localStorage.setItem("bonded-scheduler-settings",JSON.stringify(this.settings))}catch{}}async loadSettings(){try{const saved=localStorage.getItem("bonded-scheduler-settings");saved&&(this.settings={...this.settings,...JSON.parse(saved)})}catch{}}};__name(_SchedulerService,"SchedulerService");let SchedulerService=_SchedulerService;const schedulerService=new SchedulerService,_WebRTCService=class _WebRTCService{constructor(){this.peer=null,this.isConnected=!1,this.isInitiator=!1,this.connectionCallbacks=new Map}async initializeConnection(partnerId){try{this.isInitiator=!0;const mockOffer={type:"offer",signal:{type:"offer",sdp:"mock-sdp-for-mvp"},partnerId,timestamp:Date.now()};return setTimeout(()=>{this.isConnected=!0},1e3),mockOffer}catch(error){throw error}}async acceptConnection(offer){try{this.isInitiator=!1;const mockAnswer={type:"answer",signal:{type:"answer",sdp:"mock-answer-sdp-for-mvp"},partnerId:offer.partnerId,timestamp:Date.now()};return setTimeout(()=>{this.isConnected=!0},500),mockAnswer}catch(error){throw error}}async completeConnection(answer){try{return this.isConnected=!0,!0}catch(error){throw error}}async sendMessage(message){if(!this.isConnected)return this.sendViaCanister(message);try{return!0}catch{return!1}}async sendViaCanister(message){try{return!0}catch{return!1}}async requestKeyShare(requestId){try{const request={type:"key_share_request",requestId,timestamp:Date.now()};return await this.sendMessage(request),{success:!0,keyShare:"mock-key-share-for-mvp",requestId}}catch(error){throw error}}on(event,callback){this.connectionCallbacks.has(event)||this.connectionCallbacks.set(event,[]),this.connectionCallbacks.get(event).push(callback)}emit(event,data){(this.connectionCallbacks.get(event)||[]).forEach(callback=>{try{callback(data)}catch{}})}getStatus(){return{isConnected:this.isConnected,isInitiator:this.isInitiator,hasActivePeer:this.isConnected,mode:"MVP",supportsWebRTC:typeof RTCPeerConnection<"u"}}isWebRTCSupported(){return typeof RTCPeerConnection<"u"&&typeof RTCDataChannel<"u"}disconnect(){this.peer&&(this.peer=null),this.isConnected=!1,this.connectionCallbacks.clear()}getDebugInfo(){return{status:this.getStatus(),callbacks:Array.from(this.connectionCallbacks.keys()),webrtcSupport:this.isWebRTCSupported(),implementation:"MVP Simplified"}}};__name(_WebRTCService,"WebRTCService");let WebRTCService=_WebRTCService;const webrtcService=new WebRTCService;let _nsfwDetectionService=null,_ocrService=null,_textClassificationService=null,_evidenceFilterService=null;const getNSFWDetectionService=__name(async()=>{if(!_nsfwDetectionService){const{nsfwDetectionService:service}=await __vitePreload(()=>import("./evidenceFilter-6e1ec898.js").then(n=>n.n),["assets/evidenceFilter-6e1ec898.js","assets/icp-sdk-b71c0736.js","assets/vendor-e6e658b6.js","assets/textClassification-848edeeb.js"]);_nsfwDetectionService=service}return _nsfwDetectionService},"getNSFWDetectionService"),getOCRService=__name(async()=>{if(!_ocrService){const{ocrService:service}=await __vitePreload(()=>import("./evidenceFilter-6e1ec898.js").then(n=>n.o),["assets/evidenceFilter-6e1ec898.js","assets/icp-sdk-b71c0736.js","assets/vendor-e6e658b6.js","assets/textClassification-848edeeb.js"]);_ocrService=service}return _ocrService},"getOCRService"),getTextClassificationService=__name(async()=>{if(!_textClassificationService){const{textClassificationService:service}=await __vitePreload(()=>import("./textClassification-848edeeb.js"),["assets/textClassification-848edeeb.js","assets/icp-sdk-b71c0736.js","assets/vendor-e6e658b6.js"]);_textClassificationService=service}return _textClassificationService},"getTextClassificationService"),getEvidenceFilterService=__name(async()=>{if(!_evidenceFilterService){const{aiEvidenceFilter:aiEvidenceFilter2}=await __vitePreload(()=>import("./evidenceFilter-6e1ec898.js").then(n=>n.e),["assets/evidenceFilter-6e1ec898.js","assets/icp-sdk-b71c0736.js","assets/vendor-e6e658b6.js","assets/textClassification-848edeeb.js"]);_evidenceFilterService=aiEvidenceFilter2}return _evidenceFilterService},"getEvidenceFilterService"),disposeAIServices=__name(async()=>{try{const disposalPromises=[];return _nsfwDetectionService&&typeof _nsfwDetectionService.dispose=="function"&&disposalPromises.push(_nsfwDetectionService.dispose()),_ocrService&&typeof _ocrService.dispose=="function"&&disposalPromises.push(_ocrService.dispose()),_textClassificationService&&typeof _textClassificationService.dispose=="function"&&disposalPromises.push(_textClassificationService.dispose()),_evidenceFilterService&&typeof _evidenceFilterService.dispose=="function"&&disposalPromises.push(_evidenceFilterService.dispose()),await Promise.allSettled(disposalPromises),_nsfwDetectionService=null,_ocrService=null,_textClassificationService=null,_evidenceFilterService=null,{success:!0}}catch(error){return{success:!1,error:error.message}}},"disposeAIServices"),aiEvidenceFilter={async filterImage(imageInput){return(await getEvidenceFilterService()).filterImage(imageInput)},async filterText(text){return(await getEvidenceFilterService()).filterText(text)},async dispose(){return disposeAIServices()}},nsfwDetectionService={async detectNSFW(image){return(await getNSFWDetectionService()).detectNSFW(image)},async dispose(){return(await getNSFWDetectionService()).dispose()}},ocrService={async extractText(image,options={}){return(await getOCRService()).extractText(image,options)},async dispose(){return(await getOCRService()).dispose()}},textClassificationService={async classifyText(text){return(await getTextClassificationService()).classifyText(text)},async dispose(){return(await getTextClassificationService()).dispose()}};export{EncryptionService,EvidenceProcessor,TimelineService,aiEvidenceFilter,encryptionService,evidenceProcessorService as evidenceProcessor,icpCanisterService,mediaAccessService,nsfwDetectionService,ocrService,schedulerService,textClassificationService,timelineService,webrtcService};
