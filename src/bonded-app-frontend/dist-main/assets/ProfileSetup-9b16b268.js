var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{u as useNavigate,r as reactExports,g as jsxRuntimeExports}from"./vendor-e6e658b6.js";import{C as CountrySelect,A as AsyncCountrySelect,g as getAllCountries,d as detectVPN,a as getCitiesByCountry,b as getCurrentLocation,v as validateLocationConsistency,r as reverseGeocode}from"./locationService-2b51ac9f.js";import icpUserService from"./icpUserService-71066c08.js";import{C as CustomTextField}from"./CustomTextField-dcd5565c.js";import{u as useBondedServices}from"./useBondedServices-4c833e9c.js";import"./icp-sdk-b71c0736.js";import"./icpCanisterService-30902200.js";import"./index-ed0f0e28.js";const formatOptionLabel=__name(({label,flag})=>jsxRuntimeExports.jsxs("div",{style:{display:"flex",alignItems:"center"},children:[flag&&jsxRuntimeExports.jsx("img",{src:flag,alt:label,style:{marginRight:"10px",width:"20px"}}),jsxRuntimeExports.jsx("span",{children:label})]}),"formatOptionLabel"),ProfileSetup=__name(()=>{const navigate=useNavigate();useBondedServices();const[formData,setFormData]=reactExports.useState({fullName:"",email:"",dateOfBirth:"",nationality:null,currentCity:null,currentCountry:null,profilePhoto:null}),[hasExistingBasicInfo,setHasExistingBasicInfo]=reactExports.useState(!1),[formErrors,setFormErrors]=reactExports.useState({}),[countries,setCountries]=reactExports.useState([]),[isLoading,setIsLoading]=reactExports.useState(!1),[isLoadingLocation,setIsLoadingLocation]=reactExports.useState(!1),[isSubmitting,setIsSubmitting]=reactExports.useState(!1),[locationError,setLocationError]=reactExports.useState(null),[vpnDetected,setVpnDetected]=reactExports.useState(!1);reactExports.useState({status:"pending",message:"Identity verification pending",verificationId:null});const[securityStatus,setSecurityStatus]=reactExports.useState({status:"pending",message:"Location verification pending"});reactExports.useEffect(()=>{const loadUserData=__name(async()=>{try{await icpUserService.initialize();let getUserAttempts=0,currentUser=null;for(;getUserAttempts<8;){try{if(currentUser=await icpUserService.getCurrentUser(!0),currentUser&&currentUser.isAuthenticated){if(currentUser.settings&&(currentUser.settings.profile_metadata||currentUser.settings.profileMetadata))break;if(getUserAttempts<6){await new Promise(resolve=>setTimeout(resolve,1e3*(getUserAttempts+1))),getUserAttempts++;continue}else break}}catch(error){getUserAttempts++,console.warn(`ProfileSetup: Get user attempt ${getUserAttempts} failed:`,error),getUserAttempts<8&&await new Promise(resolve=>setTimeout(resolve,1e3))}getUserAttempts++}if(currentUser&&currentUser.isAuthenticated&&currentUser.principal)if(currentUser.settings){const profileMetadata=currentUser.settings.profileMetadata||currentUser.settings.profile_metadata||currentUser.settings.profile;if(profileMetadata)try{const profileData=typeof profileMetadata=="string"?JSON.parse(profileMetadata):profileMetadata;if(profileData.profileComplete){navigate("/timeline");return}setFormData({fullName:profileData.fullName||"",email:profileData.email||"",dateOfBirth:profileData.dateOfBirth||"",nationality:profileData.nationality||null,currentCity:profileData.currentCity||null,currentCountry:profileData.currentCountry||null,profilePhoto:null}),(profileData.hasBasicInfo||profileData.fullName&&profileData.email)&&setHasExistingBasicInfo(!0)}catch(parseError){console.warn("Failed to parse profile metadata:",parseError),setHasExistingBasicInfo(!0)}else setHasExistingBasicInfo(!0)}else setHasExistingBasicInfo(!0)}catch{}},"loadUserData"),loadCountries=__name(async()=>{try{setIsLoading(!0);const countryList=await getAllCountries();setCountries(countryList)}catch{}finally{setIsLoading(!1)}},"loadCountries"),checkVPN=__name(async()=>{try{setSecurityStatus({status:"checking",message:"Checking your connection security..."}),(await detectVPN()).isVPN?(setVpnDetected(!0),setLocationError("VPN or proxy detected. Please disable to continue."),setSecurityStatus({status:"error",message:"VPN or proxy detected. This app requires your real location for verification purposes."})):setSecurityStatus({status:"verified",message:"Connection secure - no VPN detected"})}catch{setSecurityStatus({status:"error",message:"Could not verify connection security"})}},"checkVPN");loadUserData(),loadCountries(),checkVPN()},[]);const handleChange=__name(e=>{const{name,value}=e.target;setFormData({...formData,[name]:value}),formErrors[name]&&setFormErrors({...formErrors,[name]:""})},"handleChange"),handleSelectChange=__name((name,selectedOption)=>{setFormData({...formData,[name]:selectedOption}),formErrors[name]&&setFormErrors({...formErrors,[name]:""}),name==="currentCountry"&&setFormData(prev=>({...prev,currentCity:null}))},"handleSelectChange"),loadCities=__name(async inputValue=>{if(!formData.currentCountry?.value)return[];try{const cities=await getCitiesByCountry(formData.currentCountry.value);return inputValue?cities.filter(city=>city.label.toLowerCase().includes(inputValue.toLowerCase())):cities}catch{return[]}},"loadCities"),handleUseCurrentLocation=__name(async()=>{if(vpnDetected){setLocationError("Please disable your VPN to use current location.");return}setIsLoadingLocation(!0),setLocationError(null);try{const coordinates=await getCurrentLocation(),validationResult=await validateLocationConsistency(coordinates);if(!validationResult.isConsistent){setLocationError(validationResult.message),setIsLoadingLocation(!1);return}const locationData=await reverseGeocode({lat:coordinates.lat,lng:coordinates.lng});if(locationData&&locationData.country){const matchingCountry=countries.find(country=>country.value.toLowerCase()===locationData.country.toLowerCase());matchingCountry?(setFormData(prev=>({...prev,currentCountry:matchingCountry,currentCity:{label:locationData.city,value:locationData.city}})),setLocationError(null)):setLocationError("Could not match detected location with available countries.")}else setLocationError("Could not determine your location. Please select manually.")}catch{setLocationError("Location detection failed. Please select your location manually.")}finally{setIsLoadingLocation(!1)}},"handleUseCurrentLocation"),validateForm=__name(()=>{const errors={};if(hasExistingBasicInfo||(formData.fullName||(errors.fullName="Full name is required"),formData.email?/\S+@\S+\.\S+/.test(formData.email)||(errors.email="Please enter a valid email address"):errors.email="Email is required"),!formData.dateOfBirth)errors.dateOfBirth="Date of birth is required";else{const birthDate=new Date(formData.dateOfBirth),today=new Date;let age=today.getFullYear()-birthDate.getFullYear();const monthDiff=today.getMonth()-birthDate.getMonth();(monthDiff<0||monthDiff===0&&today.getDate()<birthDate.getDate())&&age--,age<18&&(errors.dateOfBirth="You must be at least 18 years old"),age>120&&(errors.dateOfBirth="Please enter a valid date of birth")}return formData.nationality||(errors.nationality="Nationality is required"),formData.currentCountry||(errors.currentCountry="Current country is required"),formData.currentCity||(errors.currentCity="Current city is required"),setFormErrors(errors),Object.keys(errors).length===0},"validateForm"),completeProfileSetup=__name(async()=>{try{const userPrincipal=(await icpUserService.getCurrentUser(!0))?.principal?.toString()||"User",avatar=formData.fullName?formData.fullName.split(" ").map(n=>n[0]).join("").toUpperCase().substring(0,2):userPrincipal.substring(0,2).toUpperCase(),userData={...formData,avatar,userPrincipal,kycStatus:{status:"skipped",message:"Verification skipped for now"},securityStatus,profileComplete:!0,profileCompletedAt:Date.now()},profileMetadata=JSON.stringify(userData);if(await icpUserService.updateUserSettings({profile_metadata:profileMetadata}),new URLSearchParams(window.location.search).get("from")==="invite"){const storedInviteData=sessionStorage.getItem("acceptedInviteData");if(storedInviteData)try{const inviteData=JSON.parse(storedInviteData);sessionStorage.removeItem("acceptedInviteData"),navigate("/timeline");return}catch{}}navigate("/timeline")}catch(error){setFormErrors({submit:`Failed to complete profile setup: ${error.message}. Please try again.`})}},"completeProfileSetup"),handleSubmit=__name(async e=>{if(e.preventDefault(),!!validateForm()){setIsSubmitting(!0);try{await completeProfileSetup()}catch(error){setFormErrors({submit:`Failed to save profile: ${error.message}. Please try again.`})}finally{setIsSubmitting(!1)}}},"handleSubmit");return jsxRuntimeExports.jsx("div",{className:"profile-setup-screen",children:jsxRuntimeExports.jsxs("div",{className:"profile-setup-content",children:[jsxRuntimeExports.jsx("h1",{className:"profile-title",children:"Complete your profile"}),jsxRuntimeExports.jsx("p",{className:"profile-subtitle",children:"Please provide your personal details and current location for verification"}),jsxRuntimeExports.jsxs("div",{className:`security-status ${securityStatus.status}`,children:[jsxRuntimeExports.jsxs("div",{className:"security-icon",children:[securityStatus.status==="checking"&&jsxRuntimeExports.jsx("div",{className:"spinner"}),securityStatus.status==="verified"&&jsxRuntimeExports.jsx("div",{className:"check-icon"}),securityStatus.status==="error"&&jsxRuntimeExports.jsx("div",{className:"warning-icon"}),securityStatus.status==="pending"&&jsxRuntimeExports.jsx("div",{className:"clock-icon"})]}),jsxRuntimeExports.jsx("div",{className:"security-message",children:securityStatus.message})]}),jsxRuntimeExports.jsxs("form",{className:"profile-form",onSubmit:handleSubmit,children:[jsxRuntimeExports.jsxs("div",{className:"form-section",children:[jsxRuntimeExports.jsx("h2",{className:"section-title",children:"Personal Information"}),!hasExistingBasicInfo&&jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment,{children:[jsxRuntimeExports.jsx("div",{className:"form-field",children:jsxRuntimeExports.jsx(CustomTextField,{label:"Full Name",name:"fullName",type:"text",placeholder:"Enter your full name",value:formData.fullName,onChange:handleChange,supportingText:formErrors.fullName||"Your legal name",error:!!formErrors.fullName,required:!0})}),jsxRuntimeExports.jsx("div",{className:"form-field",children:jsxRuntimeExports.jsx(CustomTextField,{label:"Email Address",name:"email",type:"email",placeholder:"Enter your email address",value:formData.email,onChange:handleChange,supportingText:formErrors.email||"We'll use this to contact you",error:!!formErrors.email,required:!0})})]}),hasExistingBasicInfo&&jsxRuntimeExports.jsxs("div",{className:"existing-info-display",children:[jsxRuntimeExports.jsxs("p",{children:["Welcome back, ",jsxRuntimeExports.jsx("strong",{children:formData.fullName}),"!"]}),jsxRuntimeExports.jsxs("p",{children:["Email: ",formData.email]})]}),jsxRuntimeExports.jsx("div",{className:"form-field",children:jsxRuntimeExports.jsx(CustomTextField,{label:"Date of Birth",name:"dateOfBirth",type:"date",placeholder:"",value:formData.dateOfBirth,onChange:handleChange,supportingText:formErrors.dateOfBirth||"For profile completion",error:!!formErrors.dateOfBirth,required:!0})}),jsxRuntimeExports.jsxs("div",{className:"form-field",children:[jsxRuntimeExports.jsx("label",{className:"select-label",children:"Nationality"}),jsxRuntimeExports.jsx(CountrySelect,{name:"nationality",options:countries,value:formData.nationality,onChange:option=>handleSelectChange("nationality",option),placeholder:"Select your nationality",className:`select-control ${formErrors.nationality?"select-error":""}`,isLoading,formatOptionLabel,error:!!formErrors.nationality}),formErrors.nationality&&jsxRuntimeExports.jsx("div",{className:"error-message",children:formErrors.nationality})]})]}),jsxRuntimeExports.jsxs("div",{className:"form-section location-section",children:[jsxRuntimeExports.jsx("h2",{className:"section-title",children:"Current Location"}),locationError&&jsxRuntimeExports.jsxs("div",{className:"location-error",children:[jsxRuntimeExports.jsx("span",{className:"error-icon",children:"!"}),locationError]}),jsxRuntimeExports.jsxs("div",{className:"form-field",children:[jsxRuntimeExports.jsx("label",{className:"select-label",children:"Current Country"}),jsxRuntimeExports.jsx(CountrySelect,{name:"currentCountry",options:countries,value:formData.currentCountry,onChange:option=>handleSelectChange("currentCountry",option),placeholder:"Select your current country",className:`select-control ${formErrors.currentCountry?"select-error":""}`,isLoading,formatOptionLabel,error:!!formErrors.currentCountry}),formErrors.currentCountry&&jsxRuntimeExports.jsx("div",{className:"error-message",children:formErrors.currentCountry})]}),jsxRuntimeExports.jsxs("div",{className:"form-field",children:[jsxRuntimeExports.jsx("label",{className:"select-label",children:"Current City"}),jsxRuntimeExports.jsx(AsyncCountrySelect,{loadOptions:loadCities,name:"currentCity",value:formData.currentCity,onChange:option=>handleSelectChange("currentCity",option),placeholder:"Select or type your city",className:`select-control ${formErrors.currentCity?"select-error":""}`,isDisabled:!formData.currentCountry,noOptionsMessage:()=>formData.currentCountry?"No cities found":"Select a country first",error:!!formErrors.currentCity}),formErrors.currentCity&&jsxRuntimeExports.jsx("div",{className:"error-message",children:formErrors.currentCity})]}),jsxRuntimeExports.jsx("button",{type:"button",className:`location-button ${isLoadingLocation?"loading":""} ${vpnDetected?"disabled":""}`,onClick:handleUseCurrentLocation,disabled:isLoadingLocation||vpnDetected,children:isLoadingLocation?"Detecting location...":"Use Current Location"}),vpnDetected&&jsxRuntimeExports.jsx("div",{className:"vpn-warning",children:jsxRuntimeExports.jsxs("p",{children:[jsxRuntimeExports.jsx("strong",{children:"VPN Detected:"})," The Bonded App requires your real location for verification. Please disable any VPN, proxy, or location masking tools to continue."]})})]}),jsxRuntimeExports.jsx("div",{className:"form-actions",children:jsxRuntimeExports.jsx("button",{type:"submit",className:"submit-button",disabled:vpnDetected||isSubmitting,children:isSubmitting?"Completing Profile...":"Complete Profile & Continue"})}),formErrors.submit&&jsxRuntimeExports.jsxs("div",{className:"error-banner",children:[jsxRuntimeExports.jsx("span",{className:"error-icon",children:"!"}),formErrors.submit]})]})]})})},"ProfileSetup");export{ProfileSetup};
