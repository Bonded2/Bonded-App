var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{_ as __vitePreload}from"./icp-sdk-b71c0736.js";import{timelineService}from"./timelineService-a34b98cd.js";import{m as mediaAccessService}from"./mediaAccess-9b6d075b.js";const AI_CONFIG={computerVision:{modelName:"yolo-v5-nano",endpoint:"/api/ai/vision/classify",confidence_threshold:.7,max_file_size:10*1024*1024,supported_formats:["image/jpeg","image/png","image/webp","image/heic"]},textualAnalysis:{modelName:"tinybert",endpoint:"/api/ai/text/classify",confidence_threshold:.8,max_text_length:5e3}},_ComputerVisionClassifier=class _ComputerVisionClassifier{constructor(){this.isInitialized=!1}async initialize(){try{return this.isInitialized=!0,!0}catch{return!1}}async classifyImage(imageFile){if(this.isInitialized||await this.initialize(),!this.validateImageFile(imageFile))throw new Error("Invalid image file");try{return{success:!0,data:await this.mockImageClassification(imageFile),model:AI_CONFIG.computerVision.modelName,timestamp:new Date().toISOString()}}catch(error){throw new Error(`Classification failed: ${error.message}`)}}validateImageFile(file){if(!file||!(file instanceof File))return!1;if(file.size>AI_CONFIG.computerVision.max_file_size)throw new Error("File size too large");if(!AI_CONFIG.computerVision.supported_formats.includes(file.type))throw new Error("Unsupported file format");return!0}async mockImageClassification(file){await new Promise(resolve=>setTimeout(resolve,1e3+Math.random()*1e3));const fileName=file.name.toLowerCase();!fileName.includes("landscape")&&fileName.includes("object");const hasNudity=fileName.includes("nude")||fileName.includes("explicit")||fileName.includes("nsfw")||Math.random()>.95;return{nudity_detected:hasNudity,explicit_content:hasNudity,content_appropriate:!hasNudity,confidence_score:Math.random()*.3+.7,processing_time:Math.random()*1e3+500,exclusion_reason:hasNudity?"Nudity detected":null}}shouldExcludeImage(classificationResult){return classificationResult.success?classificationResult.data.nudity_detected?{exclude:!0,reason:"Contains nudity or explicit content"}:{exclude:!1,reason:null}:{exclude:!0,reason:"Classification failed"}}};__name(_ComputerVisionClassifier,"ComputerVisionClassifier");let ComputerVisionClassifier=_ComputerVisionClassifier;const _TextualAnalysisClassifier=class _TextualAnalysisClassifier{constructor(){this.isInitialized=!1}async initialize(){try{return this.isInitialized=!0,!0}catch{return!1}}async classifyText(text){if(this.isInitialized||await this.initialize(),!this.validateText(text))throw new Error("Invalid text input");try{return{success:!0,data:await this.mockTextClassification(text),model:AI_CONFIG.textualAnalysis.modelName,timestamp:new Date().toISOString()}}catch(error){throw new Error(`Classification failed: ${error.message}`)}}validateText(text){if(typeof text!="string"||text.trim().length===0)return!1;if(text.length>AI_CONFIG.textualAnalysis.max_text_length)throw new Error("Text too long");return!0}async mockTextClassification(text){await new Promise(resolve=>setTimeout(resolve,500+Math.random()*1e3));const explicitKeywords=["sex","sexual","nude","naked","explicit","adult","intimate","erotic","porn","xxx","nsfw","orgasm","masturbat","penis","vagina","breast","nipple","genitals"],lowerText=text.toLowerCase(),flaggedTerms=explicitKeywords.filter(keyword=>lowerText.includes(keyword)),hasExplicitContent=flaggedTerms.length>0,explicitScore=flaggedTerms.length/explicitKeywords.length;return{sexually_explicit:hasExplicitContent,explicit_score:explicitScore,content_appropriate:!hasExplicitContent,sentiment:this.analyzeSentiment(text),confidence_score:Math.random()*.3+.7,flagged_terms:flaggedTerms,processing_time:Math.random()*800+300,exclusion_reason:hasExplicitContent?"Sexually explicit content detected":null}}analyzeSentiment(text){const positiveWords=["love","happy","good","great","wonderful","amazing","beautiful"],negativeWords=["hate","sad","bad","terrible","awful","horrible","ugly"],lowerText=text.toLowerCase(),positiveCount=positiveWords.filter(word=>lowerText.includes(word)).length,negativeCount=negativeWords.filter(word=>lowerText.includes(word)).length;return positiveCount>negativeCount?"positive":negativeCount>positiveCount?"negative":"neutral"}shouldExcludeText(classificationResult){return classificationResult.success?classificationResult.data.sexually_explicit?{exclude:!0,reason:"Contains sexually explicit content"}:{exclude:!1,reason:null}:{exclude:!0,reason:"Classification failed"}}};__name(_TextualAnalysisClassifier,"TextualAnalysisClassifier");let TextualAnalysisClassifier=_TextualAnalysisClassifier;const _AIClassificationService=class _AIClassificationService{constructor(){this.visionClassifier=new ComputerVisionClassifier,this.textClassifier=new TextualAnalysisClassifier,this.isInitialized=!1}async initialize(){try{const[visionInit,textInit]=await Promise.all([this.visionClassifier.initialize(),this.textClassifier.initialize()]);return this.isInitialized=visionInit&&textInit,this.isInitialized,this.isInitialized}catch{return!1}}async classifyImage(imageFile){return await this.visionClassifier.classifyImage(imageFile)}async classifyText(text){return await this.textClassifier.classifyText(text)}shouldExcludeContent(classificationResult,contentType){return contentType==="image"?this.visionClassifier.shouldExcludeImage(classificationResult):contentType==="text"?this.textClassifier.shouldExcludeText(classificationResult):{exclude:!0,reason:"Unknown content type"}}async batchClassify(items){const results=[];for(const item of items)try{let result;item.type==="image"&&item.file?(result=await this.classifyImage(item.file),result.exclusion=this.shouldExcludeContent(result,"image")):item.type==="text"&&item.text&&(result=await this.classifyText(item.text),result.exclusion=this.shouldExcludeContent(result,"text")),results.push({id:item.id,type:item.type,result})}catch(error){results.push({id:item.id,type:item.type,error:error.message})}return results}};__name(_AIClassificationService,"AIClassificationService");let AIClassificationService=_AIClassificationService;const aiClassificationService=new AIClassificationService,_AutoAIScanner=class _AutoAIScanner{constructor(){this.isScanning=!1,this.scanProgress=0,this.totalFiles=0,this.processedFiles=0,this.approvedFiles=[],this.rejectedFiles=[],this.scanResults=null,this.settings=this.loadSettings(),this.scanInterval=null,this.observers=[]}loadSettings(){const defaultSettings={autoScanEnabled:!0,scanInterval:3e4,batchSize:5,includeVideos:!1,backgroundScanning:!0,smartTimelineUpdate:!0,confidenceThreshold:.7,notifyOnCompletion:!0};return this.asyncLoadSettings(defaultSettings),defaultSettings}async asyncLoadSettings(defaultSettings){try{const{default:realCanisterStorage}=await __vitePreload(()=>import("./realCanisterStorage-e1d3a70a.js"),["assets/realCanisterStorage-e1d3a70a.js","assets/canisterIntegration-a5c53e9e.js","assets/vendor-e6e658b6.js","assets/icp-sdk-b71c0736.js","assets/index-ed0f0e28.js","assets/icpNetworkHelper-2c245b46.js","assets/emailService-11bba984.js"]),savedSettings=await realCanisterStorage.getItem("bonded_ai_scanner_settings");if(savedSettings){const parsedSettings=JSON.parse(savedSettings);this.settings={...defaultSettings,...parsedSettings},this.notifyObservers("settingsLoaded",this.settings)}}catch{this.settings=defaultSettings}}async saveSettings(newSettings){this.settings={...this.settings,...newSettings};try{const{default:realCanisterStorage}=await __vitePreload(()=>import("./realCanisterStorage-e1d3a70a.js"),["assets/realCanisterStorage-e1d3a70a.js","assets/canisterIntegration-a5c53e9e.js","assets/vendor-e6e658b6.js","assets/icp-sdk-b71c0736.js","assets/index-ed0f0e28.js","assets/icpNetworkHelper-2c245b46.js","assets/emailService-11bba984.js"]);await realCanisterStorage.setItem("bonded_ai_scanner_settings",JSON.stringify(this.settings)),this.notifyObservers("settingsUpdated",this.settings)}catch{localStorage.setItem("bonded_ai_scanner_settings",JSON.stringify(this.settings))}}async startAutoScan(){if(!this.settings.autoScanEnabled){this.notifyObservers("scanError",new Error("Auto scan is disabled"));return}if(!this.isScanning)try{aiClassificationService.isInitialized||await aiClassificationService.initialize(),await mediaAccessService.initialize(),await this.performScan(),this.settings.backgroundScanning&&this.scheduleNextScan()}catch(error){this.notifyObservers("scanError",error)}}stopAutoScan(){this.scanInterval&&(clearInterval(this.scanInterval),this.scanInterval=null),this.isScanning=!1,this.notifyObservers("scanStopped")}scheduleNextScan(){this.scanInterval&&clearInterval(this.scanInterval),this.scanInterval=setTimeout(()=>{this.startAutoScan()},this.settings.scanInterval)}async performScan(){this.isScanning=!0,this.scanProgress=0,this.processedFiles=0,this.approvedFiles=[],this.rejectedFiles=[],this.notifyObservers("scanStarted");try{const files=await this.getGalleryFiles();if(this.totalFiles=files.length,this.totalFiles===0){this.completeScan();return}const batches=this.createBatches(files,this.settings.batchSize);for(const batch of batches){if(!this.isScanning)break;await this.processBatch(batch),this.updateProgress()}await this.completeScan()}catch(error){throw this.isScanning=!1,error}}async getGalleryFiles(){try{const recentPhotos=await mediaAccessService.getRecentPhotos({limit:50,daysBack:30});return recentPhotos&&recentPhotos.length>0?recentPhotos:await this.promptUserForFiles()}catch{return await this.promptUserForFiles()}}async promptUserForFiles(){return new Promise((resolve,reject)=>{try{const input=document.createElement("input");input.type="file",input.multiple=!0,input.accept="image/*",input.onchange=event=>{const files=Array.from(event.target.files||[]);resolve(files.map(file=>({id:`file_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,name:file.name,file,type:file.type,size:file.size,lastModified:file.lastModified,source:"user_selected"})))},input.oncancel=()=>{resolve([])},input.click()}catch(error){reject(error)}})}createBatches(files,batchSize){const batches=[];for(let i=0;i<files.length;i+=batchSize)batches.push(files.slice(i,i+batchSize));return batches}async processBatch(batch){const batchPromises=batch.map(file=>this.processFile(file));(await Promise.allSettled(batchPromises)).forEach((result,index)=>{if(this.processedFiles++,result.status==="fulfilled"){const fileResult=result.value;fileResult.exclusion.exclude?this.rejectedFiles.push({file:batch[index],result:fileResult,reason:fileResult.exclusion.reason}):this.approvedFiles.push({file:batch[index],result:fileResult})}else this.rejectedFiles.push({file:batch[index],error:result.reason.message,reason:"Processing failed"})})}async processFile(fileData){try{const imageElement=await this.createImageElement(fileData.file),{aiEvidenceFilter}=await __vitePreload(()=>import("./evidenceFilter-6e1ec898.js").then(n=>n.e),["assets/evidenceFilter-6e1ec898.js","assets/icp-sdk-b71c0736.js","assets/vendor-e6e658b6.js","assets/textClassification-848edeeb.js"]),filterResult=await aiEvidenceFilter.filterImage(imageElement,{filename:fileData.name,timestamp:fileData.lastModified,source:fileData.source}),result={id:fileData.id,name:fileData.name,approved:filterResult.approved,reasoning:filterResult.reasoning,details:filterResult.details,file:fileData.file,timestamp:fileData.lastModified,processingTime:filterResult.processingTime};return result.approved?(this.approvedFiles.push(result),await this.addToTimeline(result)):this.rejectedFiles.push(result),this.processedFiles++,result}catch(error){this.processedFiles++;const errorResult={id:fileData.id,name:fileData.name,approved:!1,reasoning:`Processing error: ${error.message}`,file:fileData.file,timestamp:fileData.lastModified,error:error.message};return this.rejectedFiles.push(errorResult),errorResult}}async createImageElement(file){return new Promise((resolve,reject)=>{const img=new Image;img.onload=()=>{URL.revokeObjectURL(img.src),resolve(img)},img.onerror=()=>{URL.revokeObjectURL(img.src),reject(new Error("Failed to load image"))},img.src=URL.createObjectURL(file)})}updateProgress(){this.scanProgress=this.processedFiles/this.totalFiles*100,this.notifyObservers("scanProgress",{progress:this.scanProgress,processed:this.processedFiles,total:this.totalFiles,approved:this.approvedFiles.length,rejected:this.rejectedFiles.length})}async completeScan(){this.isScanning=!1,this.scanProgress=100,this.scanResults={totalFiles:this.totalFiles,processedFiles:this.processedFiles,approvedFiles:this.approvedFiles,rejectedFiles:this.rejectedFiles,completedAt:new Date().toISOString()},this.settings.smartTimelineUpdate&&await this.updateTimelinesIntelligently(),this.notifyObservers("scanCompleted",this.scanResults),this.settings.notifyOnCompletion&&this.showCompletionNotification()}async updateTimelinesIntelligently(){if(this.approvedFiles.length!==0)try{for(const approvedFile of this.approvedFiles)await this.addToTimeline(approvedFile)}catch{}}async addToTimeline(approvedFile){try{const evidenceEntry={id:`evidence_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,timestamp:new Date().toISOString(),date:new Date().toISOString().split("T")[0],type:"photo",uploadStatus:"pending",content:{file:approvedFile.file,filename:approvedFile.name,type:approvedFile.file.type,size:approvedFile.file.size},metadata:{originalDate:new Date(approvedFile.timestamp).toISOString().split("T")[0],originalFilename:approvedFile.name,fileSize:approvedFile.file.size,fileType:approvedFile.file.type,aiProcessed:!0,aiApproved:!0,aiReasoning:approvedFile.reasoning,processingTime:approvedFile.processingTime,nsfwFiltered:!!approvedFile.details.nsfwDetection,nsfwResult:approvedFile.details.nsfwDetection,extractedText:approvedFile.details.ocrExtraction?.text||null,ocrConfidence:approvedFile.details.ocrExtraction?.confidence||null,textClassification:approvedFile.details.textClassification||null,deviceInfo:{userAgent:navigator.userAgent,timestamp:Date.now()}}},addedEntry=await timelineService.addTimelineEntry(evidenceEntry);return this.notifyObservers("evidenceAdded",{entry:addedEntry,aiResult:approvedFile}),addedEntry}catch(error){throw this.notifyObservers("evidenceAddFailed",{file:approvedFile,error:error.message}),error}}showCompletionNotification(){const message=`AI Scan Complete: ${this.approvedFiles.length} files approved, ${this.rejectedFiles.length} files filtered`;"Notification"in window&&Notification.permission==="granted"&&new Notification("Bonded AI Scanner",{body:message,icon:"/images/icon-192x192.png"})}addObserver(callback){this.observers.push(callback)}removeObserver(callback){this.observers=this.observers.filter(obs=>obs!==callback)}notifyObservers(event,data=null){this.observers.forEach(callback=>{try{callback(event,data)}catch{}})}getScanStatus(){return{isScanning:this.isScanning,progress:this.scanProgress,totalFiles:this.totalFiles,processedFiles:this.processedFiles,approvedCount:this.approvedFiles.length,rejectedCount:this.rejectedFiles.length,settings:this.settings}}getScanResults(){return this.scanResults}getApprovedFiles(){return this.approvedFiles}getRejectedFiles(){return this.rejectedFiles}};__name(_AutoAIScanner,"AutoAIScanner");let AutoAIScanner=_AutoAIScanner;const autoAIScanner=new AutoAIScanner;export{autoAIScanner as a,aiClassificationService as b};
